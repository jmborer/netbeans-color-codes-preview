/*
 * Copyright 2019 junichi11.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.junichi11.netbeans.modules.color.codes.preview.impl.ui.options;

import com.junichi11.netbeans.modules.color.codes.preview.options.ColorCodesPreviewOptions;
import com.junichi11.netbeans.modules.color.codes.preview.spi.ColorCodesPreviewOptionsPanel;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.util.ChangeSupport;

/**
 *
 * @author junichi11
 */
public class HexCssOptionsPanel extends ColorCodesPreviewOptionsPanel {

    private static final long serialVersionUID = 3753030644951555194L;

    private final ChangeSupport changeSupport = new ChangeSupport(this);
    private String errorMessage = null;

    /**
     * Creates new form HexCssOptionsPanel
     */
    public HexCssOptionsPanel() {
        initComponents();
        init();
    }

    private void init() {
        mimeTypeRegexTextField.getDocument().addDocumentListener(new DefaultDocumentListener());
    }

    public String getMimeTypeRegex() {
        return mimeTypeRegexTextField.getText().trim();
    }

    private void setMimeTypeRegex(String regex) {
        mimeTypeRegexTextField.setText(regex);
    }

    public boolean useNamedColors() {
        return namedColorsCheckBox.isSelected();
    }

    private void setNamedColors(boolean use) {
        namedColorsCheckBox.setSelected(use);
    }

    public boolean resolveCssVariables() {
        return resolveCssVariablesCheckBox.isSelected();
    }

    private void setResolveCssVariables(boolean resolve) {
        resolveCssVariablesCheckBox.setSelected(resolve);
    }

    void fireChange() {
        changeSupport.fireChange();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileTypesLabel = new javax.swing.JLabel();
        mimeTypeRegexTextField = new javax.swing.JTextField();
        resolveCssVariablesCheckBox = new javax.swing.JCheckBox();
        colorTypesLabel = new javax.swing.JLabel();
        namedColorsCheckBox = new javax.swing.JCheckBox();

        org.openide.awt.Mnemonics.setLocalizedText(fileTypesLabel, org.openide.util.NbBundle.getMessage(HexCssOptionsPanel.class, "HexCssOptionsPanel.fileTypesLabel.text")); // NOI18N

        mimeTypeRegexTextField.setText(org.openide.util.NbBundle.getMessage(HexCssOptionsPanel.class, "HexCssOptionsPanel.mimeTypeRegexTextField.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(resolveCssVariablesCheckBox, org.openide.util.NbBundle.getMessage(HexCssOptionsPanel.class, "HexCssOptionsPanel.resolveCssVariablesCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(colorTypesLabel, org.openide.util.NbBundle.getMessage(HexCssOptionsPanel.class, "HexCssOptionsPanel.colorTypesLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(namedColorsCheckBox, org.openide.util.NbBundle.getMessage(HexCssOptionsPanel.class, "HexCssOptionsPanel.namedColorsCheckBox.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileTypesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mimeTypeRegexTextField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(namedColorsCheckBox))
                            .addComponent(colorTypesLabel)
                            .addComponent(resolveCssVariablesCheckBox))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileTypesLabel)
                    .addComponent(mimeTypeRegexTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resolveCssVariablesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colorTypesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namedColorsCheckBox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel colorTypesLabel;
    private javax.swing.JLabel fileTypesLabel;
    private javax.swing.JTextField mimeTypeRegexTextField;
    private javax.swing.JCheckBox namedColorsCheckBox;
    private javax.swing.JCheckBox resolveCssVariablesCheckBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load() {
        ColorCodesPreviewOptions options = ColorCodesPreviewOptions.getInstance();
        setMimeTypeRegex(options.getMimeTypeRegex());
        setNamedColors(options.useNamedColors());
        setResolveCssVariables(options.resolveCssVariables());
    }

    @Override
    public void store() {
        ColorCodesPreviewOptions options = ColorCodesPreviewOptions.getInstance();
        options.setMimeTypeRegex(getMimeTypeRegex());
        options.setNamedColors(useNamedColors());
        options.setResolveCssVariables(resolveCssVariables());
    }

    @Override
    public boolean valid() {
        errorMessage = null;
        try {
            Pattern pattern = Pattern.compile(getMimeTypeRegex());
        } catch (PatternSyntaxException ex) {
            errorMessage = ex.getMessage();
        }
        return errorMessage == null;
    }

    @Override
    public void addChangeListener(ChangeListener listener) {
        changeSupport.addChangeListener(listener);
    }

    @Override
    public void removeChangeListener(ChangeListener listener) {
        changeSupport.removeChangeListener(listener);
    }

    @Override
    public String getErrorMessage() {
        return errorMessage;
    }

    private class DefaultDocumentListener implements DocumentListener {

        public DefaultDocumentListener() {
        }

        @Override
        public void insertUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            processUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            processUpdate();
        }

        private void processUpdate() {
            fireChange();
        }
    }
}
