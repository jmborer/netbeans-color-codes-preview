/*
 * Copyright 2019 junichi11.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.junichi11.netbeans.modules.color.codes.preview.options;

import com.junichi11.netbeans.modules.color.codes.preview.colors.impl.ui.options.ProvidersCellRenderer;
import com.junichi11.netbeans.modules.color.codes.preview.colors.spi.ColorCodesPreviewOptionsPanel;
import com.junichi11.netbeans.modules.color.codes.preview.colors.spi.ColorCodesProvider;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Box;
import javax.swing.JCheckBox;
import org.openide.util.Lookup;

final class ColorCodesPreviewPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = 844920036564457720L;

    private final ColorCodesPreviewOptionsPanelController controller;
    private final Map<String, JCheckBox> enabledCheckBoxes = new HashMap<>();
    private final Map<ColorCodesProvider, ColorCodesPreviewOptionsPanel> providerOptionsPanels = new HashMap<>();
    private ColorCodesPreviewOptionsPanel currentSelectedPanel = ColorCodesPreviewOptionsPanel.EMPTY_PANEL;

    ColorCodesPreviewPanel(ColorCodesPreviewOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        init();
        // TODO listen to changes in form fields and call controller.changed()
    }

    private void init() {
        providersComboBox.setRenderer(new ProvidersCellRenderer(providersComboBox.getRenderer()));
        for (ColorCodesProvider provider : getProviders()) {
            ColorCodesPreviewOptionsPanel panel = provider.getOptionsPanel();
            providerOptionsPanels.put(provider, panel == null ? ColorCodesPreviewOptionsPanel.EMPTY_PANEL : panel);
            providersComboBox.addItem(provider);

            // enabled checkboxes
            JCheckBox checkBox = new JCheckBox(provider.getDisplayName());
            checkBox.setToolTipText(provider.getDescription());
            enabledCheckBoxes.put(provider.getId(), checkBox);
            enabledPanel.add(checkBox);
            enabledPanel.add(Box.createHorizontalStrut(10));
        }
        setProviderPanel();
    }

    private Collection<? extends ColorCodesProvider> getProviders() {
        return Lookup.getDefault().lookupAll(ColorCodesProvider.class);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enabledPanel = new javax.swing.JPanel();
        enabledLabel = new javax.swing.JLabel();
        providersComboBox = new javax.swing.JComboBox<>();
        providerOptionsPanel = new javax.swing.JPanel();

        enabledPanel.setLayout(new javax.swing.BoxLayout(enabledPanel, javax.swing.BoxLayout.LINE_AXIS));

        org.openide.awt.Mnemonics.setLocalizedText(enabledLabel, org.openide.util.NbBundle.getMessage(ColorCodesPreviewPanel.class, "ColorCodesPreviewPanel.enabledLabel.text")); // NOI18N

        providersComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                providersComboBoxItemStateChanged(evt);
            }
        });

        providerOptionsPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(enabledPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(enabledLabel)
            .addComponent(providersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(providerOptionsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(enabledLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(enabledPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(providersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(providerOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void providersComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_providersComboBoxItemStateChanged
        setProviderPanel();
    }//GEN-LAST:event_providersComboBoxItemStateChanged

    private void setProviderPanel() {
        ColorCodesProvider selectedProvider = (ColorCodesProvider) providersComboBox.getSelectedItem();
        providerOptionsPanel.remove(currentSelectedPanel);
        providerOptionsPanel.add(providerOptionsPanels.get(selectedProvider));
        currentSelectedPanel = providerOptionsPanels.get(selectedProvider);
    }

    void load() {
        providerOptionsPanels.forEach((provider, panel) -> panel.load());
        ColorCodesPreviewOptions options = ColorCodesPreviewOptions.getInstance();
        enabledCheckBoxes.forEach((id, checkBox) -> {
            checkBox.setSelected(options.isEnabled(id));
        });
    }

    void store() {
        providerOptionsPanels.forEach((provider, panel) -> panel.store());
        ColorCodesPreviewOptions options = ColorCodesPreviewOptions.getInstance();
        enabledCheckBoxes.forEach((id, checkBox) -> {
            options.setEnabled(id, checkBox.isSelected());
        });
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enabledLabel;
    private javax.swing.JPanel enabledPanel;
    private javax.swing.JPanel providerOptionsPanel;
    private javax.swing.JComboBox<ColorCodesProvider> providersComboBox;
    // End of variables declaration//GEN-END:variables
}
